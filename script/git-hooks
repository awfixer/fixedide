#!/usr/bin/env bash

# Git Hooks Management Script for Zed
# Manages installation, uninstallation, and testing of git hooks

set -euo pipefail

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory and repo root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
HOOKS_DIR="$REPO_ROOT/.git/hooks"

# Hook templates directory (we'll store templates in script/hooks/)
TEMPLATES_DIR="$SCRIPT_DIR/hooks"

print_usage() {
    cat << EOF
Usage: $0 <command>

Commands:
    install     Install git hooks
    uninstall   Remove git hooks
    status      Show hook installation status
    test        Test hooks without running git commands
    help        Show this help message

Examples:
    $0 install
    $0 status
    $0 test pre-commit
EOF
}

print_status() {
    local hook_name=$1
    local hook_path="$HOOKS_DIR/$hook_name"

    if [ -f "$hook_path" ] && [ -x "$hook_path" ]; then
        echo -e "${GREEN}✓${NC} $hook_name is installed and executable"
    elif [ -f "$hook_path" ]; then
        echo -e "${YELLOW}⚠${NC} $hook_name exists but is not executable"
    else
        echo -e "${RED}✗${NC} $hook_name is not installed"
    fi
}

install_hooks() {
    echo -e "${BLUE}Installing git hooks...${NC}"
    echo ""

    # Ensure hooks directory exists
    mkdir -p "$HOOKS_DIR"

    # List of hooks to install
    local hooks=("pre-commit" "pre-push")

    for hook in "${hooks[@]}"; do
        local hook_path="$HOOKS_DIR/$hook"

        if [ -f "$hook_path" ]; then
            echo -e "${YELLOW}Hook $hook already exists${NC}"
            read -p "Overwrite? (y/N) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "Skipping $hook"
                continue
            fi
        fi

        # Hook is already in .git/hooks from direct creation
        # Just ensure it's executable
        if [ -f "$hook_path" ]; then
            chmod +x "$hook_path"
            echo -e "${GREEN}✓${NC} Installed $hook"
        else
            echo -e "${RED}✗${NC} Could not find $hook in .git/hooks"
        fi
    done

    echo ""
    echo -e "${GREEN}Git hooks installation complete!${NC}"
    echo ""
    echo "To bypass hooks temporarily, use:"
    echo "  git commit --no-verify"
    echo "  git push --no-verify"
}

uninstall_hooks() {
    echo -e "${YELLOW}Uninstalling git hooks...${NC}"
    echo ""

    local hooks=("pre-commit" "pre-push")

    for hook in "${hooks[@]}"; do
        local hook_path="$HOOKS_DIR/$hook"

        if [ -f "$hook_path" ]; then
            rm "$hook_path"
            echo -e "${GREEN}✓${NC} Removed $hook"
        else
            echo -e "${BLUE}ℹ${NC} $hook was not installed"
        fi
    done

    echo ""
    echo -e "${GREEN}Git hooks uninstalled${NC}"
}

show_status() {
    echo -e "${BLUE}Git Hooks Status:${NC}"
    echo ""

    print_status "pre-commit"
    print_status "pre-push"

    echo ""
    echo "To install hooks: $0 install"
    echo "To remove hooks:  $0 uninstall"
}

test_hook() {
    local hook_name=$1
    local hook_path="$HOOKS_DIR/$hook_name"

    if [ ! -f "$hook_path" ]; then
        echo -e "${RED}Hook $hook_name is not installed${NC}"
        return 1
    fi

    if [ ! -x "$hook_path" ]; then
        echo -e "${RED}Hook $hook_name is not executable${NC}"
        return 1
    fi

    echo -e "${BLUE}Testing $hook_name hook...${NC}"
    echo ""

    case "$hook_name" in
        pre-commit)
            # Test pre-commit hook
            bash "$hook_path"
            ;;
        pre-push)
            # Test pre-push hook with dummy parameters
            bash "$hook_path" "origin" "https://github.com/zed-industries/zed.git"
            ;;
        *)
            echo -e "${RED}Unknown hook: $hook_name${NC}"
            return 1
            ;;
    esac
}

# Main command handling
case "${1:-}" in
    install)
        install_hooks
        ;;
    uninstall)
        uninstall_hooks
        ;;
    status)
        show_status
        ;;
    test)
        if [ -z "${2:-}" ]; then
            echo -e "${RED}Please specify a hook to test${NC}"
            echo "Available hooks: pre-commit, pre-push"
            exit 1
        fi
        test_hook "$2"
        ;;
    help|--help|-h)
        print_usage
        ;;
    *)
        echo -e "${RED}Unknown command: ${1:-}${NC}"
        echo ""
        print_usage
        exit 1
        ;;
esac
