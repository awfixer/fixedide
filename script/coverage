#!/usr/bin/env bash

# Code Coverage Script for Zed
# Generates test coverage reports using cargo-llvm-cov

set -euo pipefail

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory and repo root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Default values
OUTPUT_FORMAT="html"
OUTPUT_DIR="$REPO_ROOT/target/coverage"
OPEN_REPORT=false
PACKAGE=""
THRESHOLD=""

print_usage() {
    cat << EOF
Usage: $0 [options]

Generate test coverage reports for the Zed codebase.

Options:
    -f, --format <format>   Output format: html, lcov, json, text (default: html)
    -o, --output <dir>      Output directory (default: target/coverage)
    -p, --package <name>    Run coverage for specific package only
    -t, --threshold <num>   Minimum coverage threshold (0-100)
    --open                  Open HTML report in browser after generation
    --install               Install cargo-llvm-cov if not present
    -h, --help              Show this help message

Examples:
    $0                                    # Generate HTML coverage report
    $0 --format lcov --output cov         # Generate LCOV report
    $0 --package gpui --open              # Coverage for gpui, open in browser
    $0 --threshold 70                     # Fail if coverage below 70%

Requirements:
    - cargo-llvm-cov (install with: cargo install cargo-llvm-cov)
    - llvm-tools-preview (install with: rustup component add llvm-tools-preview)
EOF
}

install_coverage_tools() {
    echo -e "${BLUE}Installing coverage tools...${NC}"

    # Check if rustup is available
    if ! command -v rustup &> /dev/null; then
        echo -e "${RED}rustup is not installed. Please install Rust first.${NC}"
        exit 1
    fi

    # Install llvm-tools-preview
    echo "Installing llvm-tools-preview..."
    rustup component add llvm-tools-preview

    # Install cargo-llvm-cov
    echo "Installing cargo-llvm-cov..."
    cargo install cargo-llvm-cov

    echo -e "${GREEN}Coverage tools installed successfully!${NC}"
}

check_tools() {
    local missing_tools=()

    if ! cargo llvm-cov --version &> /dev/null; then
        missing_tools+=("cargo-llvm-cov")
    fi

    if ! rustup component list | grep -q "llvm-tools-preview.*installed"; then
        missing_tools+=("llvm-tools-preview")
    fi

    if [ ${#missing_tools[@]} -ne 0 ]; then
        echo -e "${RED}Missing required tools: ${missing_tools[*]}${NC}"
        echo ""
        echo "Install with:"
        for tool in "${missing_tools[@]}"; do
            if [ "$tool" = "cargo-llvm-cov" ]; then
                echo "  cargo install cargo-llvm-cov"
            elif [ "$tool" = "llvm-tools-preview" ]; then
                echo "  rustup component add llvm-tools-preview"
            fi
        done
        echo ""
        echo "Or run: $0 --install"
        exit 1
    fi
}

generate_coverage() {
    echo -e "${BLUE}Generating coverage report...${NC}"
    echo ""

    cd "$REPO_ROOT"

    # Build cargo-llvm-cov command
    local cov_cmd="cargo llvm-cov"

    # Add package filter if specified
    if [ -n "$PACKAGE" ]; then
        cov_cmd+=" --package $PACKAGE"
    else
        cov_cmd+=" --workspace"
    fi

    # Add output format
    case "$OUTPUT_FORMAT" in
        html)
            mkdir -p "$OUTPUT_DIR"
            cov_cmd+=" --html --output-dir $OUTPUT_DIR"
            ;;
        lcov)
            mkdir -p "$(dirname "$OUTPUT_DIR")"
            cov_cmd+=" --lcov --output-path $OUTPUT_DIR/lcov.info"
            ;;
        json)
            mkdir -p "$(dirname "$OUTPUT_DIR")"
            cov_cmd+=" --json --output-path $OUTPUT_DIR/coverage.json"
            ;;
        text)
            cov_cmd+=" --text"
            ;;
        *)
            echo -e "${RED}Unknown format: $OUTPUT_FORMAT${NC}"
            exit 1
            ;;
    esac

    # Add other options
    cov_cmd+=" --all-targets"
    cov_cmd+=" --ignore-filename-regex '(tests?/|examples?/)'"

    # Run coverage
    echo "Running: $cov_cmd"
    echo ""

    if eval "$cov_cmd"; then
        echo ""
        echo -e "${GREEN}✓ Coverage report generated successfully${NC}"

        if [ "$OUTPUT_FORMAT" = "html" ]; then
            echo -e "${BLUE}Report location: $OUTPUT_DIR/index.html${NC}"

            if [ "$OPEN_REPORT" = true ]; then
                echo "Opening report in browser..."
                if command -v xdg-open &> /dev/null; then
                    xdg-open "$OUTPUT_DIR/index.html"
                elif command -v open &> /dev/null; then
                    open "$OUTPUT_DIR/index.html"
                else
                    echo -e "${YELLOW}Could not detect browser opener${NC}"
                fi
            fi
        elif [ "$OUTPUT_FORMAT" = "lcov" ]; then
            echo -e "${BLUE}Report location: $OUTPUT_DIR/lcov.info${NC}"
        elif [ "$OUTPUT_FORMAT" = "json" ]; then
            echo -e "${BLUE}Report location: $OUTPUT_DIR/coverage.json${NC}"
        fi

        # Check threshold if specified
        if [ -n "$THRESHOLD" ]; then
            check_threshold
        fi
    else
        echo -e "${RED}✗ Coverage generation failed${NC}"
        exit 1
    fi
}

check_threshold() {
    echo ""
    echo -e "${BLUE}Checking coverage threshold...${NC}"

    # Extract coverage percentage from text output
    local coverage_pct
    coverage_pct=$(cargo llvm-cov --workspace --all-targets --ignore-filename-regex '(tests?/|examples?/)' 2>&1 | \
        grep -oP 'TOTAL.*\K[0-9]+\.[0-9]+(?=%)' | head -1 || echo "0")

    if [ -z "$coverage_pct" ]; then
        echo -e "${YELLOW}Could not determine coverage percentage${NC}"
        return
    fi

    echo "Current coverage: ${coverage_pct}%"
    echo "Threshold: ${THRESHOLD}%"

    # Compare using bc if available, otherwise use awk
    local meets_threshold
    if command -v bc &> /dev/null; then
        meets_threshold=$(echo "$coverage_pct >= $THRESHOLD" | bc)
    else
        meets_threshold=$(awk -v cov="$coverage_pct" -v thr="$THRESHOLD" 'BEGIN { print (cov >= thr) ? 1 : 0 }')
    fi

    if [ "$meets_threshold" -eq 1 ]; then
        echo -e "${GREEN}✓ Coverage meets threshold${NC}"
    else
        echo -e "${RED}✗ Coverage below threshold${NC}"
        exit 1
    fi
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--format)
            OUTPUT_FORMAT="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -p|--package)
            PACKAGE="$2"
            shift 2
            ;;
        -t|--threshold)
            THRESHOLD="$2"
            shift 2
            ;;
        --open)
            OPEN_REPORT=true
            shift
            ;;
        --install)
            install_coverage_tools
            exit 0
            ;;
        -h|--help)
            print_usage
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            print_usage
            exit 1
            ;;
    esac
done

# Main execution
check_tools
generate_coverage
